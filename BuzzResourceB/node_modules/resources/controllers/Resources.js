var mongoose = require('mongoose');
var mimeTypeDetector = require('./mimeTypeDetector');
var persistence = require('./persistence');
var resourcesModel = require('../models/Resources');
var resourcesConstraintsModel = require('../models/Resources_Constraints');
var fs = require("fs");


/**
*Resource method for uploading resources in the mongo database
*@param {Oject} file - an object with all the resoucers attributes. 
*@param {String} disc - the description of the resource. 
*/
module.exports.uploadResource = function(file, desc) {

	if(mimeTypeDetector.detectMimeType(file)) {

		try {
			//retrieve resource type constraints synchronous
			persistence.retrieveResourceTypeConstraints(file.mimetype, function(err, constraints) {

				if(err) {

					/**
					 * @todo add exception handling
					 * exception already thrown by persistence
					 */
				 	console.log("Error getting constraints");

				} else {

					var fSize = (file.size/ 1000); // bytes to KB;

					if (constraints != null) {
						if(fSize > constraints.maxSize) {

							/**
							 * @TODO throw exception
							 */
							console.log("Error: reource type constraints not met..");

						}else {

							persistence.persistObject(file, desc);
						}
					} else {

						throw("File not supported");
						/**
						 * @todo add exception handling
						 * file not supported exception
						 */
					}
				}

			});

		} catch(e) {

			console.log(e);
		}
	}
};

/**
*Resource method for removing resources in the mongo database. 
*@param {String} r_id - the id of a resource to be removed.   
*/
module.exports.removeResource = function(r_id) {

	resourcesModel.find({"url" :r_id}).remove(function(err, results) {


		if(err)
		{
			console.log("Error removing resource")
			/**
			 * @todo add exception handling
			 * resolve resource removing
			 * unlink resource
			 */
		}
		else
		{console.log("======================================");
			console.log("Results "+ results);
			fs.unlink(r_id);
		}
	});
};

/**
*Resource method for downloading reources in the mongo database (temp method, for testing).
*@param {String} name - the name of the resource to be downloaded. 
*/
module.exports.downloadResource = function(name) {

	resourcesModel.find({
		"resourceName": name}, function(err, results) {

		if(err) {

			return console.log("Error searching...");
		} else {

			var path = "public/downloads/" + results[0].resourceName;
			fs.exists(path, function(exists) {
				if (exists) {
					// Do something
					console.log("Path already exists");



				}
				else
				{
					fs.writeFile("public/downloads/" + results[0].resourceName, results[0].data, function(err) {

						if(err) {

							return console.log("Error");

						}
					});
				}
			});


		}
	});

};


/**
*ResourceTypeConstraintsManager method for adding a type to a resource
*/
module.exports.addResourceType = function(r_type, maxSize) {

	var entry = new resourcesConstraintsModel();
	entry.resourceType = r_type;
	entry.maximumSize = maxSize;

	entry.save(function(err) {

		if (err) {

			console.log("Error: " + err);
		}
	})
		
};

module.exports.removeResourceType = function(r_type) {

	resourcesConstraintsModel.find({"resourceType" :r_type}).remove(function(err, results) {

		if(err) console.log("Error removing resource type");
	});
		
};

