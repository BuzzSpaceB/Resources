{
  "name": "deasync",
  "version": "0.0.10",
  "description": "Turns async function into sync via JavaScript wrapper of Node event loop",
  "main": "index.js",
  "author": {
    "name": "Vladimir Kurchatkin",
    "email": "vladimir.kurchatkin@gmail.com"
  },
  "contributors": [
    {
      "name": "Fred Wen",
      "email": "wenfred@gmail.com",
      "url": "https://github.com/abbr"
    }
  ],
  "license": "MIT",
  "scripts": {
    "install": "node ./build.js"
  },
  "dependencies": {
    "bindings": "~1.1.1",
    "nan": "^1.6.1"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/abbr/deasync.git"
  },
  "homepage": "https://github.com/abbr/deasync",
  "keywords": [
    "async",
    "sync",
    "sleep",
    "async wrapper"
  ],
  "readme": "deasync\n=======\ndeasync turns async function into sync, implemented with a blocking mechanism by calling Node.js event loop at JavaScript layer. The core of deasync is writen in C++.\n\n## Motivation\nSuppose you maintain a library that exposes a function <code>getData</code>. Your users call it to get actual data:   \n<code>var output = getData();</code>  \nUnder the hood data is saved in a file so you implemented <code>getData</code> using Node.js built-in <code>fs.readFileSync</code>. It's obvious both <code>getData</code> and <code>fs.readFileSync</code> are sync functions. One day you were told to switch the underlying data source to a repo such as MongoDB which can only be accessed asynchronously. You were also told to avoid pissing off your users, <code>getData</code> API cannot be changed to return merely a promise or demand a callback parameter. How do you meet both requirements?\n\nYou may tempted to use [node-fibers](https://github.com/laverdet/node-fibers) or a module derived from it, but node fibers can only wrap async function call into a sync function inside a fiber. In the case above you cannot assume all  callers are inside fibers. On the other hand, if you start a fiber in `getData` then `getData` itself will still return immediately without waiting for the async call result. For similar reason ES6 generators introduced in Node v11 won't work either. \n\nWhat really needed is a way to block subsequent JavaScript from running without blocking entire thread by yielding to allow other events in the event loop to be handled. Ideally the blockage is removed as soon as the result of async function is available. A less ideal but often acceptable alternative is a `sleep` function which you can use to implement the blockage like ```while(!done) sleep(100);```. It is less ideal because sleep duration has to be guessed. It is important the `sleep` function not only shouldn't block entire thread, but also shouldn't incur busy wait that pegs the CPU to 100%. \n\ndeasync supports both alternatives.\n\n## Usages\n* Generic wrapper of async function with standard API signature `function(p1,...pn,function cb(err,res){})`\n\n```\nvar deasync = require('deasync');\nvar cp = require('child_process');\nvar exec = deasync(cp.exec);\n// output result of ls -la\ntry{\n  console.log(exec('ls -la'));\n}\ncatch(err){\n  console.log(err);\n}\n// done is printed last, as supposed, with cp.exec wrapped in deasync; first without.\nconsole.log('done');\n```\n\n* For async function with non-standard API, for instance `function asyncFunction(p1,function cb(res){})`, use `runLoopOnce`\n\n```\nvar done = false;\nvar data;\nasyncFunction(p1,function cb(res){\n  data = res;\n  done = true;\n});\nwhile(!done) {\n  require('deasync').runLoopOnce();\n}\n// data is now populated\n```\n\n* Sleep (a wrapper of setTimeout)\n\n```\nfunction SyncFunction(){\n  var ret;\n  setTimeout(function(){\n      ret = \"hello\";\n  },3000);\n  while(ret === undefined) {\n    require('deasync').sleep(100);\n  }\n  // returns hello with sleep; undefined without\n  return ret;    \n}\n```\n\n\n## Installation\nPrerequisites: Except on a few [platform and Node version combinations](https://github.com/abbr/deasync-bin) where binary distribution is included, deasync uses node-gyp to compile C++ source code so you may need the compilers listed in [node-gyp](https://github.com/TooTallNate/node-gyp). You may also need to [update npm's bundled node gyp](https://github.com/TooTallNate/node-gyp/wiki/Updating-npm's-bundled-node-gyp).\n\nTo install, run \n```npm install deasync```\n\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/abbr/deasync/issues"
  },
  "_id": "deasync@0.0.10",
  "_shasum": "80649cee7f41685f976c65531c7a641e397cf5af",
  "_from": "deasync@",
  "_resolved": "https://registry.npmjs.org/deasync/-/deasync-0.0.10.tgz"
}
