{
  "name": "electrolyte",
  "version": "0.0.6",
  "description": "Elegant dependency injection for Node.js.",
  "keywords": [
    "require",
    "dependency",
    "dependencies",
    "injection",
    "di",
    "ioc"
  ],
  "author": {
    "name": "Jared Hanson",
    "email": "jaredhanson@gmail.com",
    "url": "http://www.jaredhanson.net/"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/jaredhanson/electrolyte.git"
  },
  "bugs": {
    "url": "http://github.com/jaredhanson/electrolyte/issues"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "http://www.opensource.org/licenses/MIT"
    }
  ],
  "main": "./lib",
  "dependencies": {
    "scripts": "0.1.x",
    "debug": "0.7.x"
  },
  "devDependencies": {
    "mocha": "1.x.x",
    "chai": "1.x.x"
  },
  "contributors": [
    {
      "name": "Jeremie Miller",
      "email": "jeremie.miller@gmail.com",
      "url": "http://jeremie.com"
    }
  ],
  "engines": {
    "node": "*"
  },
  "scripts": {
    "test": "mocha --reporter spec --require test/bootstrap/node test/*.test.js test/**/*.test.js  test/integration/node/*.test.js"
  },
  "readme": "![Logo](logo.png)\n# Electrolyte\n\n\nElectrolyte is a simple, lightweight [inversion of control](http://en.wikipedia.org/wiki/Inversion_of_control)\n(IoC) container for Node.js applications.\n\nElectrolyte automatically wires together the various components and services\nneeded by an application.  It does this using a technique known as\n[dependency injection](http://en.wikipedia.org/wiki/Dependency_injection) (DI).\nUsing Electrolyte eliminates boilerplate code and improves software quality by\nencouraging loose coupling between modules, resulting in greater reusability and\nincreased test coverage.\n\nFor further details about the software architecture used for IoC and dependency\ninjection, refer to [Inversion of Control Containers and the Dependency Injection pattern](http://martinfowler.com/articles/injection.html)\nby [Martin Fowler](http://martinfowler.com/).\n\n## Install\n\n    $ npm install electrolyte\n\n## Usage\n\nThere are two important terms to understand when using Electrolyte:\ncomponents and annotations.\n\n#### Components\n\nComponents are simply modules which return objects used within an application.\nFor instance, a typical web application might need a place to store settings, a\ndatabase connection, and a logging facility.\n\nHere's a component that initializes settings:\n\n```javascript\nexports = module.exports = function() {\n  var settings = {}\n    , env = process.env.NODE_ENV || 'development';\n\n  switch (env) {\n    case 'production':\n      settings.dbHost = 'sql.example.com';\n      settings.dbPort = 3306;\n      break;\n    default:\n      settings.dbHost = '127.0.0.1';\n      settings.dbPort = 3306;\n      break;\n  }\n\n  return settings;\n}\n\nexports['@singleton'] = true;\n```\n\nPretty simple.  A component exports a \"factory\" function, which is used to\ncreate and initialize an object.  In this case, it just sets a couple options\ndepending on the environment.\n\nWhat about `exports['@singleton']`?  That's an annotation, and we'll return to\nthat in a moment.\n\n\nHere's another component that initializes a database connection:\n\n```javascript\nvar mysql = require('mysql');\n\nexports = module.exports = function(settings) {\n  var connection = mysql.createConnection({\n    host: settings.dbHost,\n    port: settings.dbPort\n  });\n\n  connection.connect(function(err) {\n    if (err) { throw err; }\n  });\n\n  return connection;\n}\n\nexports['@singleton'] = true;\nexports['@require'] = [ 'settings' ];\n```\n\nAlso very simple.  A function is exported which creates a database connection.\nAnd those annotations appear again.\n\n#### Annotations\n\nAnnotations provide an extra bit of metadata about the component, which\nElectrolyte uses to automatically wire together an application.\n\n- `@require`  Declares an array of dependencies needed by the component.  These\n   dependencies are automatically created and injected as arguments (in the same\n   order as listed in the array) to the exported function.\n\n- `@singleton`  Indicates that the component returns a singleton object, which\n  should be shared by all components in the application.\n\n#### Creating Components\n\nComponents are created by asking the IoC container to create them:\n\n```javascript\nvar IoC = require('electrolyte');\n\nvar db = IoC.create('database');\n```\n\nElectrolyte is smart enough to automatically traverse a component's dependencies\n(and dependencies of dependencies, and so on), correctly wiring together the\ncomplete object structure.\n\nIn the case of the database above, Electrolyte would first initialize the\n`settings` component, and pass the result as an argument to the `database`\ncomponent.  The database connection would then be returned from `IoC.create`.\n\nThis automatic instantiation and injection of components eliminates the\nboilerplate plumbing many application need for initialization.\n\n#### Configure the Loader\n\nWhen a component is `@require`'d by another component, Electrolyte will\nautomatically load and instantiate it.  The loader needs to be configured with\nlocation where an application's components are found:\n\n```javascript\nIoC.loader(IoC.node('app/components'));\n```\n\n#### @require vs require()\n\nLoading components is similar in many regards to `require`ing a module, with\none primary difference: components have the ability to return an object that\nis configured according to application-level or environment-specific settings.\nTraditional modules, in contrast, assume very little about the runtime\nconfiguration of an application and export common, reusable bundles of\nfunctionality.\n\nUsing the strengths of each approach yields a nicely layered architecture, which\ncan be seen in the database component above.  The `mysql` module provides\nreusable functionality for communicating with MySQL databases.  The database\ncomponent provides a _configured instance_ created from that module that\nconnects to a specific database.\n\nThis pattern is common: modules are `require()`'d, and object instances created\nfrom those modules are `@require`'d.\n\nThere are scenarios in which this line can blur, and it becomes desireable to\ninject modules themselves.  This is typical with modules that provide\nnetwork-related functionality that needs to be mocked out in test environments.\n\nElectrolyte can be configured to do this automatically, by configuring the loader\nto inject modules:\n\n```javascript\nIoC.loader(IoC.node_modules());\n````\n\nWith that in place, the database component above can be re-written as follows:\n\n```javascript\nexports = module.exports = function(mysql, settings) {\n  var connection = mysql.createConnection({\n    host: settings.dbHost,\n    port: settings.dbPort\n  });\n\n  connection.connect(function(err) {\n    if (err) { throw err; }\n  });\n\n  return connection;\n}\n\nexports['@singleton'] = true;\nexports['@require'] = [ 'mysql', 'settings' ];\n```\n\nNote that now the `mysql` module is injected by Electrolyte, rather than\nexplicitly `require()`'d.  This makes it easy to write tests for this component\nwhile mocking out network access entirely.\n\n## Examples\n\n- __[Express](https://github.com/jaredhanson/electrolyte/tree/master/examples/express)__\n  An example Express app using IoC to create routes, with necessary components.\n\n## Tests\n\n    $ npm install\n    $ npm test\n\n## Credits\n\n  - [Jared Hanson](http://github.com/jaredhanson)\n  - Atomic by Cengiz SARI from The Noun Project\n  - [Colour palette](http://www.colourlovers.com/palette/912371/Electrolytes)\n\n## License\n\n[The MIT License](http://opensource.org/licenses/MIT)\n\nCopyright (c) 2013 Jared Hanson <[http://jaredhanson.net/](http://jaredhanson.net/)>\n",
  "readmeFilename": "README.md",
  "homepage": "https://github.com/jaredhanson/electrolyte",
  "_id": "electrolyte@0.0.6",
  "_shasum": "3a98733743e920a202b5f0b3e49a0083023428a8",
  "_from": "electrolyte@0.0.6",
  "_resolved": "https://registry.npmjs.org/electrolyte/-/electrolyte-0.0.6.tgz"
}
